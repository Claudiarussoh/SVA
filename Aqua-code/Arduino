// Adafruit IO Digital Output Example
// Tutorial Link: https://learn.adafruit.com/adafruit-io-basics-digital-output
//
// Adafruit invests time and resources providing this open source code.
// Please support Adafruit and open source hardware by purchasing
// products from Adafruit!
//
// Written by Todd Treece for Adafruit Industries
// Copyright (c) 2016 Adafruit Industries
// Licensed under the MIT license.
//
// All text above must be included in any redistribution.

/************************** Configuration ***********************************/

// edit the config.h tab and enter your Adafruit IO credentials
// and any additional configuration needed for WiFi, cellular,
// or ethernet clients.
#include "config.h"
#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is plugged into digital pin 2 on the Arduino
#define ONE_WIRE_BUS 2

// Setup a oneWire instance to communicate with any OneWire device
OneWire oneWire(ONE_WIRE_BUS);  

// Pass oneWire reference to DallasTemperature library
DallasTemperature sensors(&oneWire);


// button state
int current = 0;
int last = -1;
const int trigPin = 12;
const int echoPin = 13;
float distance = 0;
int current1 = 0;
int last1 = -1;


/************************ Example Starts Here *******************************/

// digital pin 2
#define TEMP_PIN 2

// set up the 'digital' feed
AdafruitIO_Feed *digital = io.feed("temperature");
AdafruitIO_Feed *growth = io.feed("growth");
AdafruitIO_Feed *growthtrigger = io.feed("growthtrigger");


void setup() {
  
 // set button pin as an input
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(TEMP_PIN, INPUT);
  

  // start the serial connection
  Serial.begin(115200);

  // wait for serial monitor to open
  while(! Serial);

  // connect to io.adafruit.com
  Serial.print("Connecting to Adafruit IO");
  io.connect();

    // set up a message handler for the 'digital' feed.
  // the handleMessage function (defined below)
  // will be called whenever a message is
  // received from adafruit io.
  
  growthtrigger->onMessage(handleMessage);

  // wait for a connection
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // we are connected
  Serial.println();
  Serial.println(io.statusText());
  growthtrigger->get();

}

void loop() {
  
// io.run(); is required for all sketches.
  // it should always be present at the top of your loop
  // function. it keeps the client connected to
  // io.adafruit.com, and processes any incoming data.
  io.run();
  
 //grab the distance sensor
 current1 = getDistance();

 Serial.print(current1);
 Serial.println(" in");

  
//TEMP

// Send the command to get temperatures
  sensors.requestTemperatures(); 
  
 // grab the current state of the photocell
  current = sensors.getTempCByIndex(0);

 //print the temperature in Celsius
  Serial.print("Temperature: ");
  Serial.print(sensors.getTempCByIndex(0));
  Serial.println(" C");

  delay(3000);

   // return if the value hasn't changed
  if(current == last)
    return;
  
  // save the current state to the 'digital' feed on adafruit io
  Serial.println("sending temp -> ");
  Serial.print(current);
  digital->save(current);

   // store last temperature state
  last = current; 
  
}


//------------------FUNCTIONS-------------------------------


// this function is called whenever an 'digital' feed message
// is received from Adafruit IO. it was attached to
// the 'digital' feed in the setup() function above.
void handleMessage(AdafruitIO_Data *data) {



  
  if (data->toPinLevel() == HIGH) {
    Serial.println("received <- ");
    Serial.print("HIGH");
   
    growth->save(current1);
    Serial.println("sending height-> ");
    Serial.print(current1);
    
  }
  
//  if(current1 == last1)
//  return;
// 
//  // store last
//  last1 = current1;
 
  // wait one second (1000 milliseconds == 1 second)
  
 // delay(1000);
}

//RETURNS THE DISTANCE MEASURED BY THE HC-SR04 DISTANCE SENSOR

float getDistance()
{
  float echoTime;                   //variable to store the time it takes for a ping to bounce off an object
  float calculatedDistance;         //variable to store the distance calculated from the echo time
  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  echoTime = pulseIn(echoPin, HIGH);      //use the pulsein command to see how long it takes for the
                                          //pulse to bounce back to the sensor
  calculatedDistance = echoTime / 148.0;  //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound)
  return calculatedDistance;              //send back the distance that was calculated
}
